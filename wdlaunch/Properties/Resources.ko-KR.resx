<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AATerm" xml:space="preserve">
    <value>안티에일리어싱</value>
  </data>
  <data name="AATip" xml:space="preserve">
    <value>dgVoodoo 안티에일리어싱 (MSAA)
- 가장자리를 부드럽게 만듭니다.</value>
  </data>
  <data name="AdminModeTerm" xml:space="preserve">
    <value>✱</value>
    <comment>(admin mode)</comment>
  </data>
  <data name="AdminModeTip" xml:space="preserve">
    <value>Windows UAC 때문에, 관리자 권한 없이 White Day를 실행하면
저장 파일과 스크린샷의 위치가 메인 디렉토리 대신 '%localappdata%\VirtualStore'로 변경됩니다.</value>
  </data>
  <data name="AutoLaunchTerm" xml:space="preserve">
    <value>자동 실행</value>
  </data>
  <data name="AutoLaunchTip" xml:space="preserve">
    <value>자동 실행을 사용하면 공식 런처를 건너뛰고 게임을 바로 시작합니다.
- 게임을 처음 플레이하는 경우 활성화하지 마세요.
- 재미있는 사실은 SHIFT 키를 누르면서 열면 이 런처를 건너뛸 수도 있다는 것입니다.</value>
  </data>
  <data name="CancelTerm" xml:space="preserve">
    <value>취소</value>
  </data>
  <data name="D3D8WrapperTip" xml:space="preserve">
    <value>dgVoodoo를 사용하여 게임의 Direct3D 그래픽 API를 D3D 11로 변환합니다.
- 호환성 문제를 수정하고 다른 개선 사항을 제공합니다.
- '빠른 게임 속도' 문제를 수정합니다.</value>
  </data>
  <data name="EnglishTerm" xml:space="preserve">
    <value>English</value>
    <comment>영어</comment>
  </data>
  <data name="FixLocaleTerm" xml:space="preserve">
    <value>로케일 수정</value>
  </data>
  <data name="LangButtonTip" xml:space="preserve">
    <value />
  </data>
  <data name="LocaleEmulatorTip" xml:space="preserve">
    <value>게임을 한국어 로케일로 실행합니다.
- 시스템 로케일이 한국어로 설정되어 있지 않은 경우 필수적입니다.
- 누락된 UI와 무작위로 떠다니는 객체 등 많은 문제를 수정합니다.</value>
  </data>
  <data name="NoTerm" xml:space="preserve">
    <value>아니오</value>
  </data>
  <data name="OpenCaptureDirTip" xml:space="preserve">
    <value>스크린샷 폴더를 엽니다.
참고: 위치는 게임이 관리자 모드에서 실행되는지 여부에 따라 다릅니다.</value>
  </data>
  <data name="OpenMainDirTip" xml:space="preserve">
    <value>메인 디렉토리를 엽니다.</value>
  </data>
  <data name="OpenSavesDirTip" xml:space="preserve">
    <value>저장 폴더를 엽니다.
참고: 위치는 게임이 관리자 모드에서 실행되는지 여부에 따라 다릅니다.</value>
  </data>
  <data name="TexFiltTerm" xml:space="preserve">
    <value>텍스처 필터링</value>
  </data>
  <data name="TexFiltTip" xml:space="preserve">
    <value>dgVoodoo 텍스처 필터링
- 각도에서 텍스처를 향상시킵니다.</value>
  </data>
  <data name="VersionTip" xml:space="preserve">
    <value>현재 설치된 White Day 재패키지 버전입니다.
업데이트를 확인하려면 클릭하세요.</value>
  </data>
  <data name="WrapD3DTerm" xml:space="preserve">
    <value>Wrap Direct3D</value>
  </data>
  <data name="YesTerm" xml:space="preserve">
    <value>예</value>
  </data>
</root>